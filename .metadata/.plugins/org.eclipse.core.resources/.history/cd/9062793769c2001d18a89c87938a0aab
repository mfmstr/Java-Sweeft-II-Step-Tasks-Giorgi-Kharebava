package javasweeftsecondsteptasks.tasks;

public class Fourth {
	
	/* პრობლება:
	მოცემულია ორი binary string a და b, დააბრუნეთ მათი ჯამი, როგორც binary string.
	მაგ: a = "1010" b = "1011" , მათი ჯამი იქნება "10101"
	 */
	
	/* გადაწყვეტა:
	ორობითი სტრიქონების შესაკრებად გამოვიყენებ ქვეშმიწერით მიმატების პრინციპს, რომლის შემთხვევაშიც 
	1 + 0 > 1
	0 + 1 > 1
	1 + 1 > 0 და დავიმახსოვრებთ(carry) გადასამატებელ მნიშვნელობას, რადგან ორობითში მხოლოდ 0-ით და 1-ით შემოვიფარგლებით.
	*/

	public String addTwoBinaryStrings(String a, String b) {
		
		// შეკრება უნდა დავიწყოთ ბოლოდან, მიღებული შედეგები კი გადავიტანოთ ახალ სტრინგში, ამისათვის გამოვიყენე StringBuilder;
		StringBuilder result = new StringBuilder();
		
		// ასევე ვსაზღვრავ ორ ინტეჯერს, რომლებიც აღნიშნავენ თუ სტრინგის რომელ სიმბოლოზე ხდება მოქმედება. 
		// რადგანაც შეკრება უნდა დავიწყოთ ბოლოდან, მნიშვნელობებიც ბოლო წევრების შესაბამის წევრებზე დავაყენეთ.
		int i = a.length() - 1;
		int j = b.length() - 1;
		
		// carry ცვლადი წარმოადგენს გადასატან მნიშვნელობას, რომელიც შესაძლოა რომელიმე წევრების ჯამის შედეგად დაგვრჩეს.
		int carry = 0;
		
		// while loop იმუშავებს იქამდე, სანამ ორივე სტრიქონი არ ამოიწურება(მარჯვნიდან->მარცხნივ). 
		while(i>= 0 || j>=0) {
			
			// განვსაზღვრე sum ცვლადი, რომელშიც შევინახავთ ჯამს + წინა იტერაციიდან დარჩენილ დასამატებელ მნიშვნელობას.
			int sum = carry;
			
			// ქვემოთ მოცემულ - '0' არაფერს ცვლის, 1-0 = 1 და 0-0 = 0, უბრალოდ char გადაყავს number-ში, რაც საშუალებას გვაძლევს შედეგები შევინახოთ sum-ში. 
			sum += a.charAt(i) - '0';
			sum += b.charAt(j) - '0';
			
			// StringBuilder result-ში ვამატებთ sum-ის 2-ზე გაყოფის შედეგად მიღებულ ნაშთს, რადგან
			// 1+1-ის შემთხვევაში ჯამი 2-ია, შესაბამისად 1 უნდა დავიმახსოვროთ და 0 დავწეროთ,2 % 2 = 0,
			// ხოლო 1+0-ის შემთხვევაში ჯამი 1-ია, არაფერს ვიმახსოვრებთ და ვწერთ 1-ს, შესაბამისად 1 % 2 = 1;
			result.append(sum % 2);
			
			// მსგავსად ვიქცევით გადატანის შემთხვევაში, carry-ს ვანიჭებთ sum/2-ს, რადგან 
			// თუ ზემოთ ჯამი 2 გამოვიდა, გადასატანი მაქვს 1, 2/2 = 1, ხოლო თუ ჯამი 1 გამოვიდა, გადასატანი არაფერი მაქვს, 1/2 = 0;
			carry = sum / 2;
			
			// საჭირო ოპერაციების შემდეგ, i-ს და j-ს ვუმცირებთ მნიშვნელობას, რადგან გადმოვიდნენ უკვე შემდეგ მარცხენა ციფრებზე და განაგრძონ კალკულაცია.
			j--;
			i--;
			
		}
		
		// while loop-ის დასრულების შემდეგ ვამოწმებთ ხომ არ არის დარჩენილი გადასატანი მნიშვნელობა(1), თუ არის ვუმატებთ result სტრიქონს.
		if(carry != 0) result.append(carry);
		
		return result.reverse().toString();
		
	}
	
}
